global
    # Security settings
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # SSL/TLS settings
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Performance tuning
    nbthread 4
    maxconn 4096
    tune.ssl.default-dh-param 2048

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Logging
    option httplog
    option log-health-checks
    option dontlognull
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json

    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Stats interface
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats realm HAProxy\ Statistics
    stats auth admin:admin123

# Main HTTP frontend
frontend multi_rpc_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/multi-rpc.pem

    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }

    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s),conn_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 1000 }
    http-request deny if { sc_http_err_rate(0) gt 50 }

    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"

    # ACLs for routing
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_health path /health
    acl is_admin path_beg /admin
    acl is_metrics path_beg /metrics
    acl api_request method POST
    acl rpc_content_type hdr(content-type) -i application/json

    # Routing decisions
    use_backend websocket_backend if is_websocket
    use_backend health_backend if is_health
    use_backend admin_backend if is_admin
    use_backend metrics_backend if is_metrics
    use_backend api_backend if api_request rpc_content_type
    default_backend api_backend

# Backend definitions
backend api_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Connection settings
    option http-server-close
    option forwardfor
    option redispatch
    retries 3
    
    # Health check settings
    default-server check inter 10s fall 3 rise 2
    
    # Server definitions
    server multi-rpc-1 multi-rpc:8080 check weight 100 maxconn 500
    # Add more servers for scaling
    # server multi-rpc-2 multi-rpc-2:8080 check weight 100 maxconn 500
    # server multi-rpc-3 multi-rpc-3:8080 check weight 100 maxconn 500

backend websocket_backend
    balance source
    option httpchk GET /health
    http-check expect status 200
    
    # WebSocket specific settings
    timeout tunnel 1h
    timeout server 1h
    
    # Sticky sessions for WebSocket
    stick-table type ip size 100k expire 1h
    stick on src
    
    server multi-rpc-1 multi-rpc:8080 check weight 100
    # server multi-rpc-2 multi-rpc-2:8080 check weight 100
    # server multi-rpc-3 multi-rpc-3:8080 check weight 100

backend health_backend
    balance first
    option httpchk GET /health
    http-check expect status 200
    
    # Fast health checks
    default-server check inter 5s fall 2 rise 1
    
    server multi-rpc-1 multi-rpc:8080 check weight 100
    # server multi-rpc-2 multi-rpc-2:8080 check weight 100
    # server multi-rpc-3 multi-rpc-3:8080 check weight 100

backend admin_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Slower timeout for admin operations
    timeout server 60s
    
    # Rate limiting for admin (already done in frontend)
    server multi-rpc-1 multi-rpc:8080 check weight 100
    # server multi-rpc-2 multi-rpc-2:8080 check weight 100
    # server multi-rpc-3 multi-rpc-3:8080 check weight 100

backend metrics_backend
    balance first
    option httpchk GET /health
    http-check expect status 200
    
    server multi-rpc-1 multi-rpc:8080 check weight 100
    # server multi-rpc-2 multi-rpc-2:8080 check weight 100
    # server multi-rpc-3 multi-rpc-3:8080 check weight 100

# Special frontend for internal health checks
frontend internal_health
    bind *:8081
    monitor-uri /haproxy-health
    monitor fail if { nbsrv(api_backend) eq 0 }
    
    # HAProxy status endpoint
    stats enable
    stats uri /haproxy-stats
    stats realm HAProxy\ Internal\ Stats